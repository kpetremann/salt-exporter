{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#salt-tools","title":"Salt tools","text":""},{"location":"#salt-exporter","title":"Salt Exporter","text":"<p><code>Salt Exporter</code> is a Prometheus exporter for Saltstack events. It exposes relevant metrics regarding jobs and results.</p> <p>This exporter is passive. It does not use the Salt API.</p> <p>It works out of the box: you just need to run the exporter on the same user as the Salt Master.</p> <pre><code>$ ./salt-exporter\n</code></pre> <pre><code>$ curl -s 127.0.0.1:2112/metrics\n\nsalt_expected_responses_total{function=\"cmd.run\", state=\"\"} 6\nsalt_expected_responses_total{function=\"state.sls\",state=\"test\"} 1\n\nsalt_function_responses_total{function=\"cmd.run\",state=\"\",success=\"true\"} 6\nsalt_function_responses_total{function=\"state.sls\",state=\"test\",success=\"true\"} 1\n\nsalt_function_status{minion=\"node1\",function=\"state.highstate\",state=\"highstate\"} 1\n\nsalt_new_job_total{function=\"cmd.run\",state=\"\",success=\"false\"} 3\nsalt_new_job_total{function=\"state.sls\",state=\"test\",success=\"false\"} 1\n\nsalt_responses_total{minion=\"local\",success=\"true\"} 6\nsalt_responses_total{minion=\"node1\",success=\"true\"} 6\n\nsalt_scheduled_job_return_total{function=\"state.sls\",minion=\"local\",state=\"test\",success=\"true\"} 2\n</code></pre>"},{"location":"#salt-live","title":"Salt Live","text":"<p><code>salt-run state.event pretty=True</code> under steroids</p> <p><code>Salt Live</code> is a Terminal UI tool to watch events in real time.</p> <p>Check out the full demo here.</p> <p></p>"},{"location":"salt-exporter/configuration/","title":"Configuration","text":"<p>The salt-exporter can be configured with flags, environments variables and configuration file.</p> <p>Info</p> <p>The precedence order for the different methods is:</p> <ul> <li>flags</li> <li>environment variables</li> <li>configuration file (config.yml)</li> </ul>"},{"location":"salt-exporter/configuration/#configuration-file","title":"Configuration file","text":"<p>The exporter is looking for <code>config.yml</code>.</p> <p>See below a full example of a configuration file:</p> <pre><code>log-level: \"info\"\n\nlisten-address: \"\"\nlisten-port: 2112\n\ntls:\n  enabled: true\n  key: \"/path/to/key\"\n  certificate: \"/path/to/certificate\"\n\nmetrics:\n  global:\n    filters:\n      ignore-test: false\n      ignore-mock: false\n\n  salt_new_job_total:\n    enabled: true\n\n  salt_expected_responses_total:\n    enabled: true\n\n  salt_function_responses_total:\n    enabled: true\n    add-minion-label: false  # not recommended in production\n\n  salt_scheduled_job_return_total:\n    enabled: true\n    add-minion-label: false  # not recommended in production\n\n  salt_responses_total:\n    enabled: true\n\n  salt_function_status:\n    enabled: true\n    filters:\n      functions:\n        - \"state.highstate\"\n      states:\n        - \"highstate\"\n</code></pre>"},{"location":"salt-exporter/configuration/#global-parameters","title":"Global parameters","text":"Parameter Default Description log-level <code>info</code> log level can be: debug, info, warn, error, fatal, panic, disabled listen-address <code>0.0.0.0</code> listening address listen-port <code>2112</code> listening port"},{"location":"salt-exporter/configuration/#tls-settings","title":"TLS settings","text":"<p>All parameters below are in the <code>tls</code> section of the configuration.</p> Parameter Default Description enabled <code>false</code> enables/disables TLS on the metrics webserver key TLS key for the metrics webserver certificate TLS certificate for the metrics webserver"},{"location":"salt-exporter/configuration/#metrics-global-settings","title":"Metrics global settings","text":"<p>All parameters below are in the <code>metrics.global</code> section of the configuration.</p> Parameter Default Description filters.ignore-test <code>false</code> ignores <code>test=True</code> events filters.ignore-mock <code>false</code> ignores <code>mock=True</code> events"},{"location":"salt-exporter/configuration/#metrics-configuration","title":"Metrics configuration","text":"<p>All parameters below are in the <code>metrics</code> section of the configuration.</p> Parameter Default Description <code>&lt;metrics_name&gt;</code>.enabled <code>true</code> enables or disables a metric <code>&lt;metrics_name&gt;</code>.add-minion-labelOnly for:<ul><li><code>salt_function_responses_total</code></li><li><code>salt_scheduled_job_return_total</code></li></ul> <code>false</code> adds minion labelnot recommendedcan lead to cardinality issues salt_function_status.filters.function <code>state.highstate</code> updates the metric only if the event function matches the filter salt_function_status.filters.states <code>highstate</code> updates the metric only if the event state matches the filter"},{"location":"salt-exporter/configuration/#alternative-methods","title":"Alternative methods","text":""},{"location":"salt-exporter/configuration/#environment-variables","title":"Environment variables","text":"<p>All settings available in the configuration file can be set as environment variables, but:</p> <ul> <li>all variables must be prefixed by <code>SALT_</code></li> <li>uppercase only</li> <li><code>-</code> in the configuration file becomes a <code>_</code></li> <li><code>__</code> is the level separator</li> </ul> <p>For example, the equivalent of this config file:</p> <pre><code>log-level: \"info\"\ntls:\n  enabled: true\nmetrics:\n  global:\n    filters:\n      ignore-test: true\n</code></pre> <p>is:</p> <pre><code>SALT_LOG_LEVEL=\"info\"\nSALT_TLS__ENABLED=true\nSALT_METRICS__GLOBAL__FILTERS__IGNORE_TEST=true\n</code></pre>"},{"location":"salt-exporter/configuration/#flags","title":"Flags","text":"<pre><code>./salt-exporter -help\n  -health-functions-filter string\n        [DEPRECATED] apply filter on functions to monitor, separated by a comma (default \"highstate\")\n  -health-states-filter string\n        [DEPRECATED] apply filter on states to monitor, separated by a comma (default \"highstate\")\n  -health-minions\n        [DEPRECATED] enable minion metrics (default true)\n  -host string\n        listen address\n  -ignore-mock\n        ignore mock=True events\n  -ignore-test\n        ignore test=True events\n  -log-level string\n        log level (debug, info, warn, error, fatal, panic, disabled) (default \"info\")\n  -port int\n        listen port (default 2112)\n  -tls\n        enable TLS\n  -tls-cert string\n        TLS certificated\n  -tls-key string\n        TLS private key\n</code></pre>"},{"location":"salt-exporter/metrics/","title":"Exposed metrics","text":""},{"location":"salt-exporter/metrics/#metrics","title":"Metrics","text":"Supported Salt event tags <p>Each Salt event having a tag in this list will update the metrics:</p> <ul> <li><code>salt/job/&lt;jid&gt;/new</code></li> <li><code>salt/job/&lt;jid&gt;/ret/&lt;*&gt;</code></li> <li><code>salt/run/&lt;jid&gt;/new</code></li> <li><code>salt/run/&lt;jid&gt;/ret/&lt;*&gt;</code></li> </ul> Metric Labels Description <code>salt_new_job_total</code> <code>function</code>, <code>state</code> Total number of new jobs <code>salt_expected_responses_total</code> <code>function</code>, <code>state</code> Counter incremented by the number of targeted minion for each new job <code>salt_function_responses_total</code> <code>function</code>, <code>state</code>, <code>success</code>(opt: <code>minion</code>) Total number of job responses by function, state and success <code>salt_scheduled_job_return_total</code> <code>function</code>, <code>state</code>, <code>success</code>(opt: <code>minion</code>) Counter incremented each time a minion sends a scheduled job result <code>salt_responses_total</code> <code>minion</code>, <code>success</code> Total number of job responsesincluding scheduled_job responses <code>salt_function_status</code> <code>function</code>, <code>state</code>, <code>minion</code> Last status of a job execution* <p>* more details in the section below.</p>"},{"location":"salt-exporter/metrics/#labels-details","title":"Labels details","text":"<p>The exporter exposes the label for both classic jobs and runners.</p> Prometheus label Salt information <code>function</code> execution module <code>state</code> state and state module <code>minion</code> minion sending the response <code>success</code> job status"},{"location":"salt-exporter/metrics/#function-status","title":"Function status","text":"<p>By default, a Salt highstate generates the following metric: <pre><code>salt_function_status{function=\"state.highstate\",minion=\"node1\",state=\"highstate\"} 1\n</code></pre></p> <p>The value can be:</p> <ul> <li><code>1</code> the last function/state execution was <code>successful</code></li> <li><code>0</code> the last function/state execution has <code>failed</code></li> </ul> <p>You can find an example of Prometheus alerts that could be used here.</p> <p>See the configuration page if you want to watch other functions/states, or if you want to disable this metric.</p>"},{"location":"salt-exporter/metrics/#how-to-estimate-missing-responses","title":"How to estimate missing responses","text":"<p>Simple way:     <pre><code>salt_expected_responses_total - on(function) salt_function_responses_total\n</code></pre></p> <p>More advanced:     <pre><code>sum by (instance, function, state) (\n    increase(salt_expected_responses_total{function=~\"$function\", state=~\"$state\"}[$__rate_interval])\n)\n- sum by (instance, function, state) (\n    increase(salt_function_responses_total{function=~\"$function\", state=~\"$state\"}[$__rate_interval])\n)\n</code></pre></p>"},{"location":"salt-exporter/metrics/#examples","title":"Examples","text":"Execution modules <pre><code># HELP salt_expected_responses_total Total number of expected minions responses\n# TYPE salt_expected_responses_total counter\nsalt_expected_responses_total{function=\"cmd.run\", state=\"\"} 6\nsalt_expected_responses_total{function=\"test.ping\", state=\"\"} 6\n\n# HELP salt_function_responses_total Total number of responses per function processed\n# TYPE salt_function_responses_total counter\nsalt_function_responses_total{function=\"cmd.run\",state=\"\",success=\"true\"} 6\nsalt_function_responses_total{function=\"test.ping\",state=\"\",success=\"true\"} 6\n\n# HELP salt_new_job_total Total number of new jobs processed\n# TYPE salt_new_job_total counter\nsalt_new_job_total{function=\"cmd.run\",state=\"\"} 3\nsalt_new_job_total{function=\"test.ping\",state=\"\"} 3\n\n# HELP salt_responses_total Total number of responses\n# TYPE salt_responses_total counter\nsalt_responses_total{minion=\"local\",success=\"true\"} 6\nsalt_responses_total{minion=\"node1\",success=\"true\"} 6\n\n# HELP salt_scheduled_job_return_total Total number of scheduled job responses\n# TYPE salt_scheduled_job_return_total counter\nsalt_scheduled_job_return_total{function=\"cmd.run\",minion=\"local\",state=\"\",success=\"true\"} 2\n</code></pre> States and state modules <p>States (state.sls/apply/highstate) and state module (state.single):</p> <pre><code>salt_expected_responses_total{function=\"state.apply\",state=\"highstate\"} 1\nsalt_expected_responses_total{function=\"state.highstate\",state=\"highstate\"} 2\nsalt_expected_responses_total{function=\"state.sls\",state=\"test\"} 1\nsalt_expected_responses_total{function=\"state.single\",state=\"test.nop\"} 3\n\nsalt_function_responses_total{function=\"state.apply\",state=\"highstate\",success=\"true\"} 1\nsalt_function_responses_total{function=\"state.highstate\",state=\"highstate\",success=\"true\"} 2\nsalt_function_responses_total{function=\"state.sls\",state=\"test\",success=\"true\"} 1\nsalt_function_responses_total{function=\"state.single\",state=\"test.nop\",success=\"true\"} 3\n\nsalt_function_status{minion=\"node1\",function=\"state.highstate\",state=\"highstate\"} 1\n\nsalt_new_job_total{function=\"state.apply\",state=\"highstate\",success=\"false\"} 1\nsalt_new_job_total{function=\"state.highstate\",state=\"highstate\",success=\"false\"} 2\nsalt_new_job_total{function=\"state.sls\",state=\"test\",success=\"false\"} 1\nsalt_new_job_total{function=\"state.single\",state=\"test.nop\",success=\"true\"} 3\n\nsalt_scheduled_job_return_total{function=\"state.sls\",minion=\"local\",state=\"test\",success=\"true\"} 3\n</code></pre>"},{"location":"salt-exporter/performance/","title":"Estimated performance","text":"<p>According to a simple benchmark, for a single event it takes:</p> <ul> <li>~60\u00b5s for parsing</li> <li>~9\u00b5s for converting to Prometheus metric</li> </ul> <p>With a security margin, we can estimate processing an event should take 100\u00b5s maximum.</p> <p>Roughly, the exporter should be able to handle about 10kQps.</p> <p>For a base of 1000 Salt minions, it should be able to sustain 10 jobs per minion per second, which is quite high for Salt.</p>"},{"location":"salt-exporter/quickstart/","title":"Salt Exporter","text":""},{"location":"salt-exporter/quickstart/#installation","title":"Installation","text":"<p>You can download the binary from the Github releases page.</p> <p>Or install from source:</p> <ul> <li> <p>latest published version:     <pre><code>go install github.com/kpetremann/salt-exporter/cmd/salt-exporter@latest\n</code></pre></p> </li> <li> <p>latest commit (unstable):     <pre><code>go install github.com/kpetremann/salt-exporter/cmd/salt-exporter@main\n</code></pre></p> </li> </ul> <p>Deprecation notice</p> <p>The following flags are deprecated:</p> <ul> <li><code>-health-minions</code></li> <li><code>-health-functions-filter</code></li> <li><code>-health-states-filter</code></li> </ul> <p>They should be replaced by metrics configuration in the <code>config.yml</code> file.</p> <p>The equivalent of: <pre><code>./salt-exporter -health-minions -health-functions-filter \"func1,func2\" -health-states-filter \"state1,state2\"`\n</code></pre></p> <p>is: <pre><code>metrics:\n  salt_responses_total:\n    enabled: true\n\n  salt_function_status:\n    enabled: true\n    filters:\n      functions:\n        - \"func1\"\n        - \"func2\"\n      states:\n        - \"state1\"\n        - \"state2\"\n</code></pre></p>"},{"location":"salt-exporter/quickstart/#usage","title":"Usage","text":"<p>The exporter runs out of the box: <code>./salt-exporter</code></p> <p>Note</p> <p>You need to run the exporter with the user running the Salt master.</p> <p>Examples of configuration options</p> <ul> <li>All metrics can be either enabled or disabled.</li> <li>You can add a minion label to some metrics (not recommended on large environment as it could lead to cardinality issues).</li> <li>You can filter out <code>test=true</code>/<code>mock=true</code> events, useful to ignore tests.</li> <li>... more options can be found in the configuration page</li> </ul>"},{"location":"salt-live/quickstart/","title":"Salt Live","text":""},{"location":"salt-live/quickstart/#quickstart","title":"Quickstart","text":"<p><code>Salt Live</code> is a Terminal UI tool to watch events in real time.</p> <p>It includes the following features:</p> <ul> <li>Hard filter from the CLI: filtered out events are discarded forever.</li> <li>Soft filter from the TUI: filtered out events are still kept in the buffer.</li> <li>Event details can be displayed in:<ul> <li>YAML</li> <li>JSON</li> <li>Golang structure</li> </ul> </li> <li>The list is frozen when navigating the events.<ul> <li>It prevents annoying list updates when checking event details.</li> <li>New events are still received and kept in the buffer.</li> <li>Once the freeze is removed, the events are displayed in real-time.</li> </ul> </li> </ul>"},{"location":"salt-live/quickstart/#installation","title":"Installation","text":"<p>You can download the binary from the Github releases page.</p> <p>Or install from source:</p> <ul> <li>latest published version:     <pre><code>go install github.com/kpetremann/salt-exporter/cmd/salt-live@latest\n</code></pre></li> <li>latest commit (unstable):     <pre><code>go install github.com/kpetremann/salt-exporter/cmd/salt-live@main\n</code></pre></li> </ul>"},{"location":"salt-live/quickstart/#credits","title":"Credits","text":"<p>This tool uses these amazing libraries:</p> <ul> <li>Bubble tea</li> <li>Bubbles</li> </ul>"},{"location":"salt-live/usage/","title":"Usage","text":""},{"location":"salt-live/usage/#tutorial","title":"Tutorial","text":""},{"location":"salt-live/usage/#hard-filter","title":"Hard filter","text":"<p>You can run <code>Salt Live</code> with the <code>-hard-filter</code> flag.</p> <p>Unlike the filter in the TUI (using /), all events not matching the filter are definitely discarded.</p>"},{"location":"salt-live/usage/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"Key Effect Q Exit. / Display the prompt to edit the filter. Up / Down Navigate in the list. This stops the refresh of the list. F Follow mode: resume the refresh of the event list. M Change output format of the side panel (YAML, JSON, Golang structure). W Toggle word wrap (only in JSON mode)."}]}